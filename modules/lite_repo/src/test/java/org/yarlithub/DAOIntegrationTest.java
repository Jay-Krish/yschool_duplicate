package org.yarlithub;

import org.junit.Assert;
import org.junit.Test;


import org.yarlithub.yschool.factories.yschoolLite.*;
import org.yarlithub.yschool.model.obj.yschoolLite.*;
import org.yarlithub.yschool.services.data.DataLayerYschoolLite;
import org.yarlithub.yschool.services.data.DataLayerYschoolLiteImpl;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.junit.runner.RunWith;
import org.springframework.transaction.annotation.Transactional;

/** Hibernate tester.
* @author autogenerated
*/
@SuppressWarnings("cast")
@ContextConfiguration(locations = { "/applicationContext.xml" } )
@RunWith(SpringJUnit4ClassRunner.class)
public class DAOIntegrationTest {
		

	/**
	 * Clears the database.
	 */
	@Test
	@Transactional
	public void testPreCleanDBFirstPass() {
		// We'll ignore any exceptions in this pass to give time for the custom exec to execute too 
		// (+ clear out any DB loops)
	
		try{HibernateYschoolLiteDaoFactory.getMarksDao().getQuery("delete from Marks").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateYschoolLiteDaoFactory.getExamDao().getQuery("delete from Exam").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateYschoolLiteDaoFactory.getClassSubjectDao().getQuery("delete from ClassSubject").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateYschoolLiteDaoFactory.getClassStudentDao().getQuery("delete from ClassStudent").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateYschoolLiteDaoFactory.getClassStaffDao().getQuery("delete from ClassStaff").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateYschoolLiteDaoFactory.getStudentHasOptionalsubjectDao().getQuery("delete from StudentHasOptionalsubject").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateYschoolLiteDaoFactory.getClassroomDao().getQuery("delete from Classroom").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateYschoolLiteDaoFactory.getUserDao().getQuery("delete from User").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateYschoolLiteDaoFactory.getSubjectDao().getQuery("delete from Subject").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateYschoolLiteDaoFactory.getStudentDao().getQuery("delete from Student").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateYschoolLiteDaoFactory.getStaffDao().getQuery("delete from Staff").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateYschoolLiteDaoFactory.getSchoolDao().getQuery("delete from School").executeUpdate(); } catch (Exception e) { /* do nothing */ }


		
	}
	/**
	 * Clears the database.
	 */
	@Test
	@Transactional
	public void testPreCleanDBFinalPass() {
	
		HibernateYschoolLiteDaoFactory.getMarksDao().getQuery("delete from Marks").executeUpdate();
		HibernateYschoolLiteDaoFactory.getExamDao().getQuery("delete from Exam").executeUpdate();
		HibernateYschoolLiteDaoFactory.getClassSubjectDao().getQuery("delete from ClassSubject").executeUpdate();
		HibernateYschoolLiteDaoFactory.getClassStudentDao().getQuery("delete from ClassStudent").executeUpdate();
		HibernateYschoolLiteDaoFactory.getClassStaffDao().getQuery("delete from ClassStaff").executeUpdate();
		HibernateYschoolLiteDaoFactory.getStudentHasOptionalsubjectDao().getQuery("delete from StudentHasOptionalsubject").executeUpdate();
		HibernateYschoolLiteDaoFactory.getClassroomDao().getQuery("delete from Classroom").executeUpdate();
		HibernateYschoolLiteDaoFactory.getUserDao().getQuery("delete from User").executeUpdate();
		HibernateYschoolLiteDaoFactory.getSubjectDao().getQuery("delete from Subject").executeUpdate();
		HibernateYschoolLiteDaoFactory.getStudentDao().getQuery("delete from Student").executeUpdate();
		HibernateYschoolLiteDaoFactory.getStaffDao().getQuery("delete from Staff").executeUpdate();
		HibernateYschoolLiteDaoFactory.getSchoolDao().getQuery("delete from School").executeUpdate();


		
	}

	
	/**
	 * Hibernate test case for table: yschool_lite.classroom.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testClassroom() throws CloneNotSupportedException {

	 	DataLayerYschoolLite dataLayerYschoolLite = DataLayerYschoolLiteImpl.getInstance();
		Classroom classroom = YschoolLiteDataPoolFactory.getClassroom();
		dataLayerYschoolLite.saveOrUpdate(classroom);

		Integer classroomId = classroom.getId();
		Classroom copy = classroom.clone();
		dataLayerYschoolLite.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerYschoolLite.evict(classroom); 		 

		classroom = dataLayerYschoolLite.getClassroom(classroomId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getClassTeacher().getId(), classroom.getClassTeacher().getId());
		Assert.assertEquals(copy.getDivision(), classroom.getDivision());
		Assert.assertEquals(copy.getGrade(), classroom.getGrade());
		Assert.assertEquals(new java.text.SimpleDateFormat("dd/MM/yyyy").format(copy.getYear().getTime()), new java.text.SimpleDateFormat("dd/MM/yyyy").format(classroom.getYear().getTime()));
		// tests for coverage completeness
		Assert.assertFalse(classroom.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(classroom.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: yschool_lite.class_staff.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testClassStaff() throws CloneNotSupportedException {

	 	DataLayerYschoolLite dataLayerYschoolLite = DataLayerYschoolLiteImpl.getInstance();
		ClassStaff classStaff = YschoolLiteDataPoolFactory.getClassStaff();
		// Cascading on this property was switched off from config (or requires hbn bug workaround). Performing manual cascade.
		org.yarlithub.yschool.factories.yschoolLite.HibernateYschoolLiteDaoFactory.getClassroomDao().saveOrUpdate(((org.yarlithub.yschool.model.obj.yschoolLite.ClassStaffPK)classStaff.getId()).getClassIdclass());
		// Cascading on this property was switched off from config (or requires hbn bug workaround). Performing manual cascade.
		org.yarlithub.yschool.factories.yschoolLite.HibernateYschoolLiteDaoFactory.getStaffDao().saveOrUpdate(((org.yarlithub.yschool.model.obj.yschoolLite.ClassStaffPK)classStaff.getId()).getStaffIdstaff());
		// Cascading on this property was switched off from config (or requires hbn bug workaround). Performing manual cascade.
		org.yarlithub.yschool.factories.yschoolLite.HibernateYschoolLiteDaoFactory.getSubjectDao().saveOrUpdate(((org.yarlithub.yschool.model.obj.yschoolLite.ClassStaffPK)classStaff.getId()).getSubjectIdsubject());
		dataLayerYschoolLite.saveOrUpdate(classStaff);

		ClassStaffPK classStaffId = classStaff.getId();
		ClassStaff copy = classStaff.clone();
		dataLayerYschoolLite.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerYschoolLite.evict(classStaff); 		 

		classStaff = dataLayerYschoolLite.getClassStaff(classStaffId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getId(), classStaff.getId());
		// tests for coverage completeness
		Assert.assertFalse(classStaff.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(classStaff.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: yschool_lite.class_student.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testClassStudent() throws CloneNotSupportedException {

	 	DataLayerYschoolLite dataLayerYschoolLite = DataLayerYschoolLiteImpl.getInstance();
		ClassStudent classStudent = YschoolLiteDataPoolFactory.getClassStudent();
		// Cascading on this property was switched off from config (or requires hbn bug workaround). Performing manual cascade.
		org.yarlithub.yschool.factories.yschoolLite.HibernateYschoolLiteDaoFactory.getClassroomDao().saveOrUpdate(((org.yarlithub.yschool.model.obj.yschoolLite.ClassStudentPK)classStudent.getId()).getClassIdclass());
		// Cascading on this property was switched off from config (or requires hbn bug workaround). Performing manual cascade.
		org.yarlithub.yschool.factories.yschoolLite.HibernateYschoolLiteDaoFactory.getStudentDao().saveOrUpdate(((org.yarlithub.yschool.model.obj.yschoolLite.ClassStudentPK)classStudent.getId()).getStudentIdstudent());
		dataLayerYschoolLite.saveOrUpdate(classStudent);

		ClassStudentPK classStudentId = classStudent.getId();
		ClassStudent copy = classStudent.clone();
		dataLayerYschoolLite.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerYschoolLite.evict(classStudent); 		 

		classStudent = dataLayerYschoolLite.getClassStudent(classStudentId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getId(), classStudent.getId());
		// tests for coverage completeness
		Assert.assertFalse(classStudent.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(classStudent.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: yschool_lite.class_subject.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testClassSubject() throws CloneNotSupportedException {

	 	DataLayerYschoolLite dataLayerYschoolLite = DataLayerYschoolLiteImpl.getInstance();
		ClassSubject classSubject = YschoolLiteDataPoolFactory.getClassSubject();
		dataLayerYschoolLite.saveOrUpdate(classSubject);

		Integer classSubjectId = classSubject.getId();
		ClassSubject copy = classSubject.clone();
		dataLayerYschoolLite.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerYschoolLite.evict(classSubject); 		 

		classSubject = dataLayerYschoolLite.getClassSubject(classSubjectId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getClassIdclass().getId(), classSubject.getClassIdclass().getId());
		Assert.assertEquals(copy.getSubjectIdsubject().getId(), classSubject.getSubjectIdsubject().getId());
		// tests for coverage completeness
		Assert.assertFalse(classSubject.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(classSubject.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: yschool_lite.exam.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testExam() throws CloneNotSupportedException {

	 	DataLayerYschoolLite dataLayerYschoolLite = DataLayerYschoolLiteImpl.getInstance();
		Exam exam = YschoolLiteDataPoolFactory.getExam();
		dataLayerYschoolLite.saveOrUpdate(exam);

		Integer examId = exam.getId();
		Exam copy = exam.clone();
		dataLayerYschoolLite.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerYschoolLite.evict(exam); 		 

		exam = dataLayerYschoolLite.getExam(examId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getClassSubjectIdclassSubject().getId(), exam.getClassSubjectIdclassSubject().getId());
		Assert.assertEquals(new java.text.SimpleDateFormat("dd/MM/yyyy").format(copy.getDate().getTime()), new java.text.SimpleDateFormat("dd/MM/yyyy").format(exam.getDate().getTime()));
		Assert.assertEquals(copy.getTerm(), exam.getTerm());
		Assert.assertEquals(copy.getType(), exam.getType());
		Assert.assertEquals(new java.text.SimpleDateFormat("dd/MM/yyyy").format(copy.getYear().getTime()), new java.text.SimpleDateFormat("dd/MM/yyyy").format(exam.getYear().getTime()));
		// tests for coverage completeness
		Assert.assertFalse(exam.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(exam.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: yschool_lite.marks.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testMarks() throws CloneNotSupportedException {

	 	DataLayerYschoolLite dataLayerYschoolLite = DataLayerYschoolLiteImpl.getInstance();
		Marks marks = YschoolLiteDataPoolFactory.getMarks();
		dataLayerYschoolLite.saveOrUpdate(marks);

		Integer marksId = marks.getId();
		Marks copy = marks.clone();
		dataLayerYschoolLite.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerYschoolLite.evict(marks); 		 

		marks = dataLayerYschoolLite.getMarks(marksId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getExamIdexam().getId(), marks.getExamIdexam().getId());
		Assert.assertEquals(copy.getMarks(), marks.getMarks(), 0.1);
		Assert.assertEquals(copy.getStudentIdstudent().getId(), marks.getStudentIdstudent().getId());
		// tests for coverage completeness
		Assert.assertFalse(marks.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(marks.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: yschool_lite.school.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testSchool() throws CloneNotSupportedException {

	 	DataLayerYschoolLite dataLayerYschoolLite = DataLayerYschoolLiteImpl.getInstance();
		School school = YschoolLiteDataPoolFactory.getSchool();
		dataLayerYschoolLite.saveOrUpdate(school);

		Integer schoolId = school.getId();
		School copy = school.clone();
		dataLayerYschoolLite.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerYschoolLite.evict(school); 		 

		school = dataLayerYschoolLite.getSchool(schoolId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getAddress(), school.getAddress());
		Assert.assertEquals(copy.getDistrict(), school.getDistrict());
		Assert.assertEquals(copy.getName(), school.getName());
		Assert.assertEquals(copy.getProvince(), school.getProvince());
		Assert.assertEquals(copy.getZone(), school.getZone());
		// tests for coverage completeness
		Assert.assertFalse(school.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(school.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: yschool_lite.staff.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testStaff() throws CloneNotSupportedException {

	 	DataLayerYschoolLite dataLayerYschoolLite = DataLayerYschoolLiteImpl.getInstance();
		Staff staff = YschoolLiteDataPoolFactory.getStaff();
		dataLayerYschoolLite.saveOrUpdate(staff);

		Integer staffId = staff.getId();
		Staff copy = staff.clone();
		dataLayerYschoolLite.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerYschoolLite.evict(staff); 		 

		staff = dataLayerYschoolLite.getStaff(staffId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getName(), staff.getName());
		Assert.assertEquals(copy.getType(), staff.getType());
		// tests for coverage completeness
		Assert.assertFalse(staff.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(staff.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: yschool_lite.student.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testStudent() throws CloneNotSupportedException {

	 	DataLayerYschoolLite dataLayerYschoolLite = DataLayerYschoolLiteImpl.getInstance();
		Student student = YschoolLiteDataPoolFactory.getStudent();
		dataLayerYschoolLite.saveOrUpdate(student);

		Integer studentId = student.getId();
		Student copy = student.clone();
		dataLayerYschoolLite.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerYschoolLite.evict(student); 		 

		student = dataLayerYschoolLite.getStudent(studentId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getAddmisionNo(), student.getAddmisionNo());
		Assert.assertEquals(copy.getAddress(), student.getAddress());
		Assert.assertEquals(new java.text.SimpleDateFormat("dd/MM/yyyy").format(copy.getDob().getTime()), new java.text.SimpleDateFormat("dd/MM/yyyy").format(student.getDob().getTime()));
		Assert.assertEquals(copy.getFullName(), student.getFullName());
		Assert.assertEquals(copy.getGender(), student.getGender());
		Assert.assertEquals(copy.getName(), student.getName());
		Assert.assertEquals(copy.getNameWtInitial(), student.getNameWtInitial());
		Assert.assertEquals(copy.getPhoto(), student.getPhoto());
		// tests for coverage completeness
		Assert.assertFalse(student.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(student.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: yschool_lite.student_has_optionalsubject.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testStudentHasOptionalsubject() throws CloneNotSupportedException {

	 	DataLayerYschoolLite dataLayerYschoolLite = DataLayerYschoolLiteImpl.getInstance();
		StudentHasOptionalsubject studentHasOptionalsubject = YschoolLiteDataPoolFactory.getStudentHasOptionalsubject();
		// Cascading on this property was switched off from config (or requires hbn bug workaround). Performing manual cascade.
		org.yarlithub.yschool.factories.yschoolLite.HibernateYschoolLiteDaoFactory.getStudentDao().saveOrUpdate(((org.yarlithub.yschool.model.obj.yschoolLite.StudentHasOptionalsubjectPK)studentHasOptionalsubject.getId()).getStudentIdstudent());
		// Cascading on this property was switched off from config (or requires hbn bug workaround). Performing manual cascade.
		org.yarlithub.yschool.factories.yschoolLite.HibernateYschoolLiteDaoFactory.getSubjectDao().saveOrUpdate(((org.yarlithub.yschool.model.obj.yschoolLite.StudentHasOptionalsubjectPK)studentHasOptionalsubject.getId()).getSubjectIdsubject());
		dataLayerYschoolLite.saveOrUpdate(studentHasOptionalsubject);

		StudentHasOptionalsubjectPK studentHasOptionalsubjectId = studentHasOptionalsubject.getId();
		StudentHasOptionalsubject copy = studentHasOptionalsubject.clone();
		dataLayerYschoolLite.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerYschoolLite.evict(studentHasOptionalsubject); 		 

		studentHasOptionalsubject = dataLayerYschoolLite.getStudentHasOptionalsubject(studentHasOptionalsubjectId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getId(), studentHasOptionalsubject.getId());
		// tests for coverage completeness
		Assert.assertFalse(studentHasOptionalsubject.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(studentHasOptionalsubject.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: yschool_lite.subject.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testSubject() throws CloneNotSupportedException {

	 	DataLayerYschoolLite dataLayerYschoolLite = DataLayerYschoolLiteImpl.getInstance();
		Subject subject = YschoolLiteDataPoolFactory.getSubject();
		dataLayerYschoolLite.saveOrUpdate(subject);

		Integer subjectId = subject.getId();
		Subject copy = subject.clone();
		dataLayerYschoolLite.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerYschoolLite.evict(subject); 		 

		subject = dataLayerYschoolLite.getSubject(subjectId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getIsoptional(), subject.getIsoptional());
		Assert.assertEquals(copy.getName(), subject.getName());
		// tests for coverage completeness
		Assert.assertFalse(subject.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(subject.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: yschool_lite.user.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testUser() throws CloneNotSupportedException {

	 	DataLayerYschoolLite dataLayerYschoolLite = DataLayerYschoolLiteImpl.getInstance();
		User user = YschoolLiteDataPoolFactory.getUser();
		dataLayerYschoolLite.saveOrUpdate(user);

		Integer userId = user.getId();
		User copy = user.clone();
		dataLayerYschoolLite.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerYschoolLite.evict(user); 		 

		user = dataLayerYschoolLite.getUser(userId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getEmail(), user.getEmail());
		Assert.assertEquals(copy.getPassword(), user.getPassword());
		Assert.assertEquals(copy.getUserName(), user.getUserName());
		Assert.assertEquals(copy.getUserRole(), user.getUserRole());
		// tests for coverage completeness
		Assert.assertFalse(user.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(user.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}

	/**
	 * Clears the database.
	 */
	@Test
	@Transactional
	public void testPostCleanDBFirstPass() {
		// We'll ignore any exceptions in this pass to give time for the custom exec to execute too 
		// (+ clear out any DB loops)
	
		try{HibernateYschoolLiteDaoFactory.getMarksDao().getQuery("delete from Marks").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateYschoolLiteDaoFactory.getExamDao().getQuery("delete from Exam").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateYschoolLiteDaoFactory.getClassSubjectDao().getQuery("delete from ClassSubject").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateYschoolLiteDaoFactory.getClassStudentDao().getQuery("delete from ClassStudent").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateYschoolLiteDaoFactory.getClassStaffDao().getQuery("delete from ClassStaff").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateYschoolLiteDaoFactory.getStudentHasOptionalsubjectDao().getQuery("delete from StudentHasOptionalsubject").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateYschoolLiteDaoFactory.getClassroomDao().getQuery("delete from Classroom").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateYschoolLiteDaoFactory.getUserDao().getQuery("delete from User").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateYschoolLiteDaoFactory.getSubjectDao().getQuery("delete from Subject").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateYschoolLiteDaoFactory.getStudentDao().getQuery("delete from Student").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateYschoolLiteDaoFactory.getStaffDao().getQuery("delete from Staff").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateYschoolLiteDaoFactory.getSchoolDao().getQuery("delete from School").executeUpdate(); } catch (Exception e) { /* do nothing */ }


		
	}

	/**
	 * Clears the database.
	 */
	@Test
	@Transactional
	public void postCleanDBFinalPass() {
	
		HibernateYschoolLiteDaoFactory.getMarksDao().getQuery("delete from Marks").executeUpdate();
		HibernateYschoolLiteDaoFactory.getExamDao().getQuery("delete from Exam").executeUpdate();
		HibernateYschoolLiteDaoFactory.getClassSubjectDao().getQuery("delete from ClassSubject").executeUpdate();
		HibernateYschoolLiteDaoFactory.getClassStudentDao().getQuery("delete from ClassStudent").executeUpdate();
		HibernateYschoolLiteDaoFactory.getClassStaffDao().getQuery("delete from ClassStaff").executeUpdate();
		HibernateYschoolLiteDaoFactory.getStudentHasOptionalsubjectDao().getQuery("delete from StudentHasOptionalsubject").executeUpdate();
		HibernateYschoolLiteDaoFactory.getClassroomDao().getQuery("delete from Classroom").executeUpdate();
		HibernateYschoolLiteDaoFactory.getUserDao().getQuery("delete from User").executeUpdate();
		HibernateYschoolLiteDaoFactory.getSubjectDao().getQuery("delete from Subject").executeUpdate();
		HibernateYschoolLiteDaoFactory.getStudentDao().getQuery("delete from Student").executeUpdate();
		HibernateYschoolLiteDaoFactory.getStaffDao().getQuery("delete from Staff").executeUpdate();
		HibernateYschoolLiteDaoFactory.getSchoolDao().getQuery("delete from School").executeUpdate();


		
	}

}

